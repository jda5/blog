{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Better Every Loop","text":"<p>Welcome to my corner of the internet! My name is Jacob Strauss, I am a co-founder &amp; CTO at ChaseLabs and the founder of Gumbo.</p> <p>I write mostly about software engineering and building software companies, though will occasionally go rouge.</p>"},{"location":"#recent-posts","title":"Recent Posts","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tag:architecture","title":"architecture","text":"<ul> <li>            SOLID Design Principles          </li> </ul>"},{"location":"tags/#tag:blockchain","title":"blockchain","text":"<ul> <li>            How Blockchain Works          </li> </ul>"},{"location":"tags/#tag:cryptocurrency","title":"cryptocurrency","text":"<ul> <li>            How Blockchain Works          </li> </ul>"},{"location":"tags/#tag:cryptography","title":"cryptography","text":"<ul> <li>            HTTPS          </li> <li>            How Blockchain Works          </li> </ul>"},{"location":"tags/#tag:cyber-security","title":"cyber security","text":"<ul> <li>            HTTPS          </li> </ul>"},{"location":"tags/#tag:internet","title":"internet","text":"<ul> <li>            HTTPS          </li> <li>            MIME          </li> </ul>"},{"location":"tags/#tag:internet-standards","title":"internet standards","text":"<ul> <li>            MIME          </li> </ul>"},{"location":"tags/#tag:leadership","title":"leadership","text":"<ul> <li>            What We Know About Leadership          </li> </ul>"},{"location":"tags/#tag:management","title":"management","text":"<ul> <li>            How To Hire Great Software Engineers          </li> <li>            What We Know About Leadership          </li> </ul>"},{"location":"tags/#tag:recruitment","title":"recruitment","text":"<ul> <li>            How To Hire Great Software Engineers          </li> </ul>"},{"location":"tags/#tag:solid","title":"solid","text":"<ul> <li>            SOLID Design Principles          </li> </ul>"},{"location":"author/jacob/","title":"Jacob Strauss","text":"<p>Just a guy trying his best.</p>"},{"location":"2020/11/26/how-blockchain-works/","title":"How Blockchain Works","text":"<p>A few years ago, a friend approached me about starting a smart contract venture. While I hadn't one iota of experience with blockchain, I did have enthusiasm in spades. Sadly, our venture never got beyond the ideation stage. However, I did have a lot of fun learning about blockchain and even managed to create my very own cryptocurrency I christened STRAUSS COIN.</p> <p>I wrote this post to cement what I learned, and to provide a layperson summary on what has become one of the most important ideas of the 21st century: blockchain.</p>","tags":["cryptography","blockchain","cryptocurrency"]},{"location":"2020/11/26/how-blockchain-works/#a-ledger-amongst-friends","title":"A Ledger Amongst Friends","text":"<p>Suppose that you and some friends frequently exchange money, and that rather than going to the effort of physically exchanging cash every time you do so, you decide to create a ledger. This ledger is a record of financial transactions between people, and now at the end of the month if you spent more than you received you pay in what you spent, and if you received more than you spent you simply collect what others pay in. If everyone is allowed to add lines to the ledger, then you and all of your friends are able to quickly and efficiently send and receive money. </p> Sender Receiver Amount Alice Bob \u00a3200 Bob Charlie \u00a3150 Charlie Alice \u00a3500 Charlie Bob \u00a375","tags":["cryptography","blockchain","cryptocurrency"]},{"location":"2020/11/26/how-blockchain-works/#digital-signatures","title":"Digital Signatures","text":"<p>Unfortunately, there is a problem with this system. By allowing everyone to add lines to the ledger there is nothing stopping someone from adding a fraudulent transaction. What we need is some form of verification that the sender and receiver of cash both agree on the transaction. This is where our first bit of cryptographic security enters the foray: digital signatures. If the ledger was written on a piece of paper, we could have the sender and receiver agree on a transaction by signing the line on the ledger on which the details of that transaction were written. However, things on a computer work a little differently (and more securely). Every person in the network has a secret key (SK) and a public key (PK). Both of these are a unique string of random ones and zeros, and like the names suggest the SK is kept a secret, whereas the PK is made publicly available. Now, in order to sign a transaction, a person takes the data of that transaction and combines it with their secret key to produce a signature. A function that does this might look a little something like:</p> <p><code>Sign(Message, SK) = Signature</code></p> <p>What this means is that each signature is dependent on the message that the user is signing. This is great because now there is no way anyone could somehow copy your signature. Suppose for example that we have \u201cAlice pays Bob \u00a3200\u201d written on the ledger. The digital signature Alice uses for this transaction is cryptographically linked to the message, meaning that \u201cAlice pays Bob \u00a3300\u201d will produce a completely different, though equally valid signature!</p> Ledger Signed Alice pays Bob \u00a3200 73289EA2791AFB3 Bob pays Charlie \u00a3150 378259FE11B23A2 Charlie pays Alice \u00a3500 A4382A237AE29BB Charlie pays Bob \u00a375 6CCC2819E91BA01 <p>Now this is good, but at the moment only the two people involved in this transaction can verify that they have accepted it (since they don\u2019t reveal their SK). What we now need is some function that will take in a transaction, a signature and some identifier that verifies that the signature indeed does come from the people involved in the transaction. This is where the PK comes in. The PK is a unique number given to each person and is publicly available for everyone to see. As a result, anyone could use this PK to verify that a transaction was accepted by all of those involved. The function would look a little something like:</p> <p><code>Verify(Message, Signature, PK) = True / False</code></p> <p>This function will return <code>true</code> if the signature was produced by the SK associated with the PK, and will otherwise return <code>false</code>.</p> <p>Splendid, so we have a ledger, and we have a secure way of adding transactions to the ledger. Job done. Well, not quite... Where even is this ledger being stored? Who is keeping this ledger secure? We can add transactions, but what if someone were to secretly change or remove a transaction? This was the problem originally stated in the first Bitcoin paper and its solution is what makes blockchain so powerful. However, before I delve into the specifics of how we use blockchain to solve this problem, I first need to talk about the SHA256 algorithm.</p>","tags":["cryptography","blockchain","cryptocurrency"]},{"location":"2020/11/26/how-blockchain-works/#sha256","title":"SHA256","text":"<p>SHA256 (short for Secure Hashing 256) is function that takes in any data of any length and returns a 64-character hexadecimal number. The reason it\u2019s called 256 is because it always returns something that is 256 bits in memory. SHA256 function is such that you can input anything of any size \u2013 images, videos, operating systems, etc \u2013 and it will return a 64-character hash. If you want to see this for yourself, (this webpage)[https://tools.superdatascience.com/blockchain/hash/] that will encode anything you enter using SHA256. It doesn\u2019t matter what you enter, whether it is a single number or the entire works of William Shakespeare, the function will only ever return a 64-character output. </p> <p>There are a few additional requirements for any hashing algorithm (SHA256 is just one of them), which are that they need to be:</p> <ol> <li>Deterministic: an input always produces the same output.</li> <li>One-way: given an input you can calculate its corresponding hash, but you can\u2019t calculate an input from a given hash (you can\u2019t reverse engineer the algorithm).</li> <li>Able to calculate hashes quickly.</li> <li>Obey the Avalanche Effect: small changes in the input produce wildly different hashes.</li> </ol> <p>There are loads more, but in the interest of time I only wish to address these four. With respect to the avalanche effect, definitely try it out using the link above. Try giving in some long input, such as the entire text to Tolstoy\u2019s War and Peace, and see just look how quickly it generates a hash. Then change a single character, maybe add an extra space, or capitalise a letter, notice how making this small change completely alters the hash. However, when we revert back to the original input the hash returns to its original value. Incredible!</p> <p>A lot of internet security is predicated on the security of SHA256. In fact, most of our online banking is only made possible because of this hashing algorithm. Remember earlier when we were talking about digital signatures? That is an implementation of SHA256! Our functions takes in our data and SK, combine them, and then runs them through the SHA256 algorithm; and since SHA256 is one-way, there is no good way anyone could find out your SK. The only way they could ever do this is by randomly guessing your SK, then checking whether this matches the output generated by SHA256. </p>","tags":["cryptography","blockchain","cryptocurrency"]},{"location":"2020/11/26/how-blockchain-works/#p2p-network","title":"P2P Network","text":"<p>Ok, that was SHA256, now back to our problem: how can we decentralise our communal ledger? What we could do is have everyone in our network keep a copy of the ledger \u2013 this is known as a peer-to-peer network (P2P). This isn\u2019t a bad start, but we quickly run into some problems. If you are broadcasting your transactions, how can you be sure that everyone else is recording them on their ledger? How could you ensure that everyone in the network finds a consensus on what is on the ledger, and what is not on the ledger? There are different solutions to this problem, though the two most popular are the \u201cproof-of-work\u201d protocol and the \u201cproof-of-stake\u201d protocol. In this post, I will only talk about proof-of-work since this is the original protocol that Bitcoin introduced. </p>","tags":["cryptography","blockchain","cryptocurrency"]},{"location":"2020/11/26/how-blockchain-works/#proof-of-work-and-the-nonce","title":"Proof-of-Work and the Nonce","text":"<p>Suppose I had the following ledger:</p> Sender Receiver Amount Signed Alice Bob \u00a3200 73289EA2791AFB3 Bob Charlie \u00a3150 378259FE11B23A2 Charlie Alice \u00a3500 A4382A237AE29BB Charlie Bob \u00a375 6CCC2819E91BA01 Hash: <code>40A025FF8B22830D92</code>* <p>A signed ledger with its corresponding hash value after inputting it in the SHA256 algorithm. * This would normally be 64 digits</p> <p>What I could do is take this entire ledger and run it through my SHA256 algorithm. This would give me some hash value: let\u2019s say it returns 40A025FF8B22830D92 (in reality it would be 64 digits long). Now if I add some arbitrary value to this ledger (called a nonce), say the number 421341, so that SHA256 returns a hash value with four leading zeros, e.g. 00005435A8BF2830DA, how hard do you think it was for me to find this number? </p> Ledger Signed Alice pays Bob \u00a3200 73289EA2791AFB3 Bob pays Charlie \u00a3150 378259FE11B23A2 Charlie pays Alice \u00a3500 A4382A237AE29BB Charlie pays Bob \u00a375 6CCC2819E91BA01 Nonce: <code>421341</code> Hash: <code>00005435A8BF2830DA</code> <p>A signed ledger with an attached nonce, such that when inputting the ledger together with the nonce into a SHA256 function its output hash will have a certain number of leading zeros.</p> <p>Since there is no way for me to reverse engineer SHA256 I would have to randomly guess which number would produce such an outcome. The probability of finding such a number is ridiculously small \u2013 for Bitcoin it in the region north of one in a 100 billion. I will have done an incredible amount of computational work to find this number, but you can easily check whether or not this number combined with the above ledger produces a hash with four leading zeros. This number is called a \u201cnonce\u201d and this protocol is called a \u201cproof of work\u201d. Importantly, the nonce is intrinsically tied to the ledger \u2013 just like the signature was intrinsically tied to the transaction \u2013 meaning that if you change what is written on the ledger, the hash associated with the ledger is very unlikely to start with four leading zeros, and you would have to go through all that work again to find a new nonce. This is what \u201cminers\u201d do: they find nonces \u2013 but more on that later.</p> <p>Now think back to our original distributed ledger. Everyone is broadcasting transactions, writing down what they received on their ledger and comparing their ledger with everyone else\u2019s. Whose do we trust to be the correct one? Answer: the one with the most computational work put in!</p>","tags":["cryptography","blockchain","cryptocurrency"]},{"location":"2020/11/26/how-blockchain-works/#blockchain","title":"Blockchain","text":"<p>Some 1500 words later we have finally at what blockchain is. The way this proof of work concept works is as follows. We organise the ledger into blocks, where each block consists of a list of data (in this case transactions) together with a nonce, so that the hash of the block starts with a certain number of zeros (five in the example below). The hash of each block must start with a certain number of zeros, and we only acknowledge blocks that do. To ensure that there is a standard order to these transactions, we also include the hash of the previous block. This value of the previous hash is incorporated in with the calculation of our current hash and so changing any block in the chain will cause all proceeding blocks to become invalid. </p> <p></p> <p>An example of a blockchain. Called such because we chain a bunch of blocks together.</p> <p>To summarise, each block consists of:</p> <ol> <li>A block number: to ensure there are no duplicate blocks.</li> <li>The signed data: to ensure that each transaction is valid.</li> <li>The nonce: a number that when added to the block makes the hash of that block have a certain number of leading zeros.</li> <li>The previous hash: the value of the hash of the previous block.</li> <li>The current hash: the value of the hash created by running the above four items through SHA256.</li> </ol> <p>The hash of each block can be thought of its fingerprint. It is a unique value dependent on all of the information written in the block and changing any of the block\u2019s information changes the block\u2019s hash.</p>","tags":["cryptography","blockchain","cryptocurrency"]},{"location":"2020/11/26/how-blockchain-works/#an-immutable-ledger","title":"An Immutable Ledger","text":"<p>To see why this system is so secure, let\u2019s say a hacker tries to change one of the transactions in Block #2. Due to the avalanche effect, the slightest change in the block yields a different hash. This means they would also have to go through all the computational work of finding a new nonce. However, now the following block is invalid as well, since its hash was creating using the previous hash, meaning the hacker will have to find a new nonce for the following block as well, and so on. All the while, you are checking to see that your blockchain is the same as everyone else\u2019s in the network, and when you notice that your blockchain is different, you can revert back to the one everyone else has. </p>","tags":["cryptography","blockchain","cryptocurrency"]},{"location":"2020/11/26/how-blockchain-works/#miners","title":"Miners","text":"<p>Okay, to recap we have a secure way to agree on transactions, we have a secure way of storing a communal ledger and we have it such that existing transactions cannot be changed. The very last problem we need to solve is how to add new blocks to the chain.</p> <p>This is where miners come in. In our current set up the miners are listening out for transactions and adding them to their copy of the ledger. When they find a nonce for a given set of transactions, they broadcast it across the network, and everyone checks that the new block fits in with their existing chain. The miner will then be rewarded for the work they put into finding new blocks with some amount of money \u2013 this is either a fixed amount (like \u00a310 for each block) or something like a transaction fee (from each transaction on the block the miner gets 5p). Everyone else just using the network simply listens for these blocks and updates their chain. </p>","tags":["cryptography","blockchain","cryptocurrency"]},{"location":"2020/11/26/how-blockchain-works/#conflicting-blocks","title":"Conflicting blocks","text":"<p>Sometimes two miners will broadcast conflicting blocks. Perhaps before broadcasting the block, one of the miners added a line saying that Bob owes them 200 coins. Which is the correct one? Remember that in our P2P network we trust the chain with the most work put into it, so we just wait until we hear an additional block and whichever chain it tacks onto is the valid one. Finding new blocks takes a lot of work, hence if we have one malevolent miner versus ten honest ones trying to find the next block chances are that good will prevail. Of course, we don\u2019t immediately trust any block sent to us, we instead wait until four or five proceeding blocks are sent before trusting it. Now there is an interesting problem in mathematics called the Byzantine General Problem that analogously asks how many trustworthy miners are required for the blockchain to be robust, but I think that is for another blog post.</p>","tags":["cryptography","blockchain","cryptocurrency"]},{"location":"2024/07/16/how-to-hire-great-software-engineers/","title":"How To Hire Great Software Engineers","text":"<p>In a recent post about leadership, I emphasised that the goal leadership is to build and maintain effective teams. Your employees are your most valuable resource, and your success ultimately depends on theirs. It's crucial to provide them with the necessary tools, a comfortable work environment, quality mentors, and a clear, compelling vision that highlights the importance of their efforts. However, their ability to achieve both current and future goals also depends on their talent and skills.</p> <p>I recently lead on the recruitment efforts at ChaseLabs and wanted to write this post to share some of my experiences and learnings from this undertaking. A lot of the ideas in this post are taking from McCuller\u2019s (2012) book How to Recruit and Hire Great Software Engineers: Building a Crack Development Team. Rather than re-hash the structure of this book, I have written out five lessons to help guide your decision making.</p>","tags":["management","recruitment"]},{"location":"2024/07/16/how-to-hire-great-software-engineers/#lesson-one-set-your-sights-high","title":"Lesson One: Set Your Sights High","text":"<p>Do not hire anyone but the best. I made this mistake in my first start-up by hiring a part-time Fiverr engineer to do some basic work. Not only did their shoddy craftsmanship create more work for the other engineers and delay our launch, but the frequent bug fixes and diminished perceptions of quality from customers ended up costing us more. </p> <p>Therefore, I strongly encourage you to only target the top engineers in the market. Given how fraught with bias recruiting is, you\u2019ll likely end up hiring someone that is below best anyway. If you set your sights low, you risk hiring someone abysmal that will end up hurting your business.</p> <p>The simple reality is that most developers are not at all competent. Even those with several years of experience and a computer science degree often know only the basics needed for the job.</p>","tags":["management","recruitment"]},{"location":"2024/07/16/how-to-hire-great-software-engineers/#lesson-two-hire-friendly-and-passionate-learners","title":"Lesson Two: Hire Friendly and Passionate Learners","text":"<p>What exactly makes a great software engineer? Li and Zhu (2015) sought to answer this by interviewing 59 experienced engineers at Microsoft. They found that great engineers are passionate about their work, continuously strive to improve, anticipate needs, can evaluate trade-offs at multiple levels of abstraction, and are trusted and well-liked by their colleagues.</p> <p>You want to hire individuals that aren\u2019t satisfied with the status quo and constantly looking to improve themselves, their product and/or their surroundings. Such engineers typically also anticipate and build the tools you\u2019ll need to solve the next set of goals. Your software will grow with them. Furthermore, \u201clearners\u201d as I am calling them, they have the meta-cognitive skills to be able can rapidly acquire new skills, adapt to evolving technology and build new technologies to keep your products on the cutting edge.</p> <p>Often you can tell when someone truly is a learner by their side projects and qualifications. Someone that knows several programming languages is also a good sign \u2013 though if they list too many on their CV, then it is likely that they don\u2019t know any one language in any great depth. Finally, a good question to ask the candidate is what challenges they have faced. It\u2019s easy to spot a bad answer: a bad answer, and indeed what most candidates give, discusses what they should know for the job anyway. A good answer will extend beyond the job specifications describing not only what they did to learn the skill but also the intricacies involved.</p> <p>Finally, great engineers also positively impact teammates. This boils down to being a reasonable person, being a good leader, communicating effectively and being trustworthy. They create a safe haven where other engineers can learn and improve from mistakes and situations without negative consequences. They also create a sense of shared success for everyone involved, possibly involving personal compromises. They appreciate the collaborative process involved in software engineering and get everyone making decisions aligned to a shared goal.</p>","tags":["management","recruitment"]},{"location":"2024/07/16/how-to-hire-great-software-engineers/#lesson-three-hire-the-right-style-of-engineer","title":"Lesson Three: Hire The Right Style of Engineer","text":"<p>By the right style of engineer, I don\u2019t mean a job title or skills \u2013 that is a given \u2013 but more a personality type. There are different attitudes and perspectives to software engineering and knowing and taking advantage of your team\u2019s work styles will help you hire effectively. Here are a few different styles (taken from McCuller\u2019s book) to help illustrate what I mean:</p> <ul> <li>Cautious Style: patient and carful, these engineers excel at thinking out and planning projects in details.</li> <li>Quick Style: fast and furious, will leap into action, building first and asking questions later. Great at building MVPs.</li> <li>Adventurous Style: innovative and curious, will try new techniques right in the middle of a project to learn about it and see if it helps.</li> <li>Perfectionist Style: insist on standards and a high level of code quality \u2013 will create thorough unit tests.</li> </ul> <p>I\u2019d like to stress that all these styles are good. None is \u201cbetter\u201d than the other, and the optimal team will have a good mix of each. When hiring, consider the stage of the company, the existing engineering teams and any upcoming projects and decide on the kind of engineer you\u2019ll need. Typically, working in a start-up you\u2019ll want a creator type engineer \u2013 someone that works quickly and creatively. They will also form the core culture of the team, so communication skills are especially important. In more established organisations, with several thousand, possibly millions of customers, you may want to look for an optimizer type engineer that can design robust data intensive applications that meet your system\u2019s demands.</p>","tags":["management","recruitment"]},{"location":"2024/07/16/how-to-hire-great-software-engineers/#lesson-four-dont-ask-pointless-questions","title":"Lesson Four: Don\u2019t Ask Pointless Questions","text":"<p>Too often in interviews I\u2019ve heard: \u201ctell me about yourself\u201d or \u201ctell me about your recent projects\u201d or other redundant questions. Answers to such questions are usually a rehash of their CV, and are accompanied litany of buzzwords that are distracting, irrelevant and take up valuable time. When interviewing, your goal is to find out whether the candidate can communicate clearly, whether they can code and whether they can create and think about algorithms. As I said before: most engineers are not at all competent. You want to give yourself as much opportunity to identify which candidates can merely talk the talk and which are actually good.</p> <p>I recommend spending 90% of the interview asking technical questions. In fact, in the last round of interviews we did at ChaseLabs, the only non-technical questions, across two rounds of interviews, I asked were:</p> <ol> <li>What led you to your decision to apply for this role? </li> <li>What was the most challenging technology you had to learn to use for your work? How did you go about mastering it?</li> <li>Do you have any questions for me?</li> </ol>","tags":["management","recruitment"]},{"location":"2024/07/16/how-to-hire-great-software-engineers/#lesson-five-create-a-candidate-guide","title":"Lesson Five: Create a Candidate Guide","text":"<p>Software interviews are a nerve-wracking and exhausting affair. They typically span multiple rounds over several weeks, and demand (if you\u2019re doing them right) a high level of challenge.</p> <p>Not only that but interviews are also the first opportunity you get to establish a favourable reputation with your potential employees. It is therefore crucial to treat all candidates with respect and dignity, making their experience as comfortable as possible. In short, treat candidates as if they were customers.</p> <p>One way to help with this is by making the interview process as transparent as possible. Create a two-three-page guide that tells the candidates what they can expect at each stage of the interview process. The guide should seek to reduce confusion and answers pre-emptive questions that otherwise consume time. You should send candidates this guide either after they have submitted a CV or before your first interview.</p> <p>If you\u2019d like to see what we sent out to candidates for our most recent round of interviews, you can view the document here: [link]</p>","tags":["management","recruitment"]},{"location":"2024/08/21/https/","title":"HTTPS","text":"<p>Glance at the URL bar at the top of this post, notice that there is a little padlock \ud83d\udd12 next to the address. Next, click on the bar to bring up the address of the post and notice how the address starts with the letters: \u201chttps\u201d.</p> <p>By now, most people know that this means that the connection between your computer and the website is secure. It\u2019s especially noticeable when a connection is not secure and a warning in your browser appears \u2013 see for examples check out this and this webpage.</p> <p>In this post, I go over what this secure connection, known as https, is and how it works! Brew a cup of coffee and strap in for the most widely used cryptography ever devised...</p>","tags":["cryptography","cyber security","internet"]},{"location":"2024/08/21/https/#glossary","title":"Glossary","text":"<p>There are a dizzying number of acronyms that got into understanding HTTPS. Feel free to skip this, but if you\u2019re ever lost, you can always check out their definition here.</p> Term Definition HTTP Hypertext Transport Protocol: A protocol that allows two devices to transfer information between one another over a network. On its own this isn\u2019t secure. HTTPS Hypertext Transport Protocol Secure: An extension of HTTP, that uses encryption and certificates to secure a connection over a network. TLS Transport Layer Security: The actual cryptographic protocol used by HTTPS to establish a secure connection. SSL Secure Socket Layer: An outdated (deprecated) precursor to TLS. However, a lot of people still use the term, so for all intents and purposes, TLS and SSL are the same thing. CA Certificate Authority: A trusted body that issues certificates used to verify the authenticity of a server. Server A computer, device, software application, etc. that provides data. For example, a \u201cweb server\u201d provides websites. Client A computer, device, software application, etc. that requests and receives data. Examples include browsers such as Google Chrome, Firefox or Safari.","tags":["cryptography","cyber security","internet"]},{"location":"2024/08/21/https/#overview-of-https","title":"Overview of HTTPS","text":"<p>The Hypertext Transport Protocol Secure (HTTPS) is set of rules that allow you (a client) and a website (a server) to securely exchange data. The goal of HTTPS is to ensure the privacy, authenticity and integrity of communications. Let\u2019s break down what this means:</p> <ol> <li>Privacy: This ensures that no one, except you and the device you\u2019re communicating with, can read what is being sent. A lot of highly sensitive data is sent over the internet \u2013 addresses, credit cards, passwords, etc \u2013 so it is crucial that all messages are encrypted.</li> <li>Authenticity: This guarantees that the server you are communicating is genuinely who it claims to be. For instance, when you visit a website, you\u2019ll want to verify that the site is indeed the legitimate source and not an imposter. Now typically, it\u2019s only the server that needs to prove its identity, though there are scenarios where both parties authenticate each other.</li> <li>Integrity: This ensures that the data sent between the client and server remains unaltered during transmission. That is, that the message received is exactly what was sent.</li> </ol> <p>There are three essential components to HTTPS to achieving these goals: the TLS handshake \ud83e\udd1d, certificates \ud83e\uddfe and hashing functions \ud83d\ude35\u200d\ud83d\udcab. </p> <p>From here on out, I\u2019ll exclusively focus on the first two, as these form the bulk of HTTPS, but for completeness a hashing function is used to generate a \u2018scrambled\u2019 version of a message that the receiving party can use to verify that the message has not been tampered with.</p> <p>Ok, on to TLS...</p>","tags":["cryptography","cyber security","internet"]},{"location":"2024/08/21/https/#tls-the-key-exchange-part-one","title":"TLS: The Key Exchange (Part One)","text":"<p>Imagine you want to send me a letter, but you want to make sure that no one else can read it. To keep it secure, you decide to lock the letter in a box and send it to me. However, this creates a problem \u2013 I can't open the box because I don't have the key. So, how could you send me the key? You can't just include the key with the box, because if someone intercepts the package, they could easily open the box with the key and read the letter. We could meet in-person, you hand me the key and then send me your box, but doing this with everyone you want to write letters to is unfeasible. This is the crux of the problem that the TLS handshake solves: how can two people that have never met safely agree on a key?</p> <p>Let\u2019s formalise this a little more, a letter in a box is cipher text and a key is a secret number that is used to encrypt and decrypt the message. So, the problem now becomes, how can a client and a server agree on the same number without ever publicly sharing it?</p> <p>The solution lies in generating a pair of related keys called a public and private keys. As the name suggests, a public key is shared publicly and can be used by anyone to encrypt messages. However, only the private key (which is kept a secret) can be used to decrypt messages. Thus, if you want to send me a message that only I can read, you can use my public key to encrypt the message, then I can use my private key to decrypt it. This is known as asymmetric key cryptography because one key encrypts data, while the other decrypts it.</p> <p>Now, to generate a pair of public and private keys, we first randomly choose a large number. This is our private key. We can then apply a one-way mathematical function to generate a second number, that becomes our public key.</p> <p>A one-way function simply means that it\u2019s very difficult to invert the process. So given a public key its extremely difficult to ascertain what the private key was that generated it. If you want more information on how these keys are created, I recommend checking out this excellent video by a YouTuber called Spanning Tree.</p> <p>Relevant to our initial problem of generating a shared secret number, combining your private key and my public key results in the same number as would combining my private key with your public key.</p> <p>This works because each public key is a product of a private key, and we employ one-way commutative functions to generate the shared secret key (such as modular exponentiation or elliptic curve multiplication). This process is known as a key exchange, of which the most well-known and widely used is the Diffie-Hellman Key Exchange.</p>","tags":["cryptography","cyber security","internet"]},{"location":"2024/08/21/https/#tls-that-handshake-part-two","title":"TLS: That Handshake (Part Two)","text":"<p>Note: I am writing about Transport Layer Security version 1.3, which at the time of writing is the latest version. The TLS handshake version 1.3 can generate a secure connection with just two messages, which is an improvement over version 1.2 which requires four.</p> <p>The client first generates a private/public key pair for the key exchange. It then initiates a handshake with the server it wants to connect to by sending a ClientHello message. There are several parts to this message, but the four most important bits are:</p> <ol> <li>Cipher Suites: List of encryption algorithms the client supports.</li> <li>Key Exchange Methods: List of supported key exchange mechanisms. This includes variants of Diffie-Hellman.</li> <li>Key Share: A list of public keys that the server can use for key exchange.</li> <li>A Random Number: A pseudo-random value, to ensure the uniqueness of the session.</li> </ol> <p>Upon receipt of this message the server performs a few actions. First, it chooses a cipher and key exchange method from the lists sent by the client. Next, it generates its own pseudo-random value, then creates a ServerHello response message. This message is contains (in part):</p> <ol> <li>Chosen Cipher: The encryption algorithm selected from the list the client sent.</li> <li>Server\u2019s Key Share: It\u2019s public key so that the client can generate the shared secret key.</li> <li>A Random Number: The random value it generated used in the creation of the master key.</li> </ol> <p>But before sending this to the client, the server generates a hash of both the ClientHello and ServerHello messages. It combines this hash with its private key and the client\u2019s public key to create a master key, which is the key used to encrypt data. Since, it now can encrypt data, the server also attaches some encrypted extensions to its response; notably it includes the certificate the client can use to verify the server\u2019s identity (more on that later).</p> <p>Upon receipt of the ServerHello message, the client then combines it\u2019s private key with the server\u2019s public key, along with a hash of the two messages to create its personal copy of the master key. Now both the server and the client should have the same shared secret key they can use to encrypt and decrypt messages sent to one another.</p> <p>Finally, along with its first encrypted message \u2013 such as a request to view the server\u2019s homepage \u2013 the both parties attach a Finished message, which includes a cryptographic hash of the entire handshake. Both the client and server can as such verify the integrity of the handshake by comparing the received hash, along with the hash they generated, and if they are the same then each can conclude that the other party have the same session parameters.</p>","tags":["cryptography","cyber security","internet"]},{"location":"2024/08/21/https/#the-certificate","title":"The Certificate","text":"<p>The TLS handshake ensured that the connection between the client and server is private and both checked the integrity of the messages by checking the cryptographic hashes broadcast by the other party. However, the client has not yet established that the server is who they are claiming to be. For all intents and purposes, the client might have just formed a secure connection with an imposter.</p> <p>This is where digital certificates are used. Earlier we saw that the client receives this as an attachment to the ServerHello message. A certificate is a kind of digital ID card. They are issued by trusted third parties, known as a Certificate Authority (CA), trusted by your browser.</p> <p>Along with details on its expiration and the algorithms used to create the signature, a typical digital certificate contains the following fields:</p> <ul> <li>Subject: Information on the identity of the certificate owner, which usually is the hostname of the website (e.g. ideasin.dev).</li> <li>Issuer: Information about the Certificate Authority that issued the certificate.</li> <li>Public Key: A public key belonging to the owner of the certificate (more on that later).</li> <li>Extended Key Usage: The applications in which the certificate may be used, e.g. TLS, email protection, code signing, etc.</li> <li>Signature: A cryptographic hash of the body of the certificate combined with issuer\u2019s private key (usually by applying the RSA signature algorithm).</li> </ul> <p>A certificate may be valid for lots of domains and subdomains. Such certificates additionally contain the Subject Alternative Name (SAN) field \u2013 that displays a list of alternative domains for which the certificate is valid. Additionally, you can specify wildcards (an asterisk) so that a single certificate can be used for multiple sub-domains. For example: a wildcard certificate for <code>*.example.com</code> would secure the domains: www.example.com, contact.example.com, auth.example.com, etc.</p> <p>When a certificate is issued, it\u2019s often part of a hierarchical structure known as a chain of trust. This chain starts with the server's certificate and typically includes one or more intermediate certificates, ultimately ending with a root certificate.</p> <p></p> <p>The root CA\u2019s certificate is self-signed and pre-installed in your operating system or browser\u2019s trusted certificate store. Because these root certificates are inherently trusted, any certificate that chains back to one of these root certificates can also be trusted, provided that each step in the chain is valid.</p> <p>To manage risk and streamline the issuance process, CAs use intermediate certificates. If an intermediate certificate is compromised, it can be revoked without affecting the root CA or other certificates in the chain. This approach also allows root CAs to delegate certificate issuance to intermediate CAs (such as Let\u2019s Encrypt), enabling scalable and decentralised management of the process. As mentioned, there is a public key attached to the certificate. This is not the same public key used in the TLS handshake! This instead is the public key of the issuing CA that the client uses this to decrypt the digital signature on the certificate. If the decryption succeeds, the client compares the hash value it just decrypted with the hash of the actual certificate data. If these match, it proves that the certificate has not been tampered with.</p>","tags":["cryptography","cyber security","internet"]},{"location":"2024/07/22/mime/","title":"MIME","text":"<p>Strap in, this might just be the most thrilling blog post ever written, because today I am writing about internet standards.</p> <p>Multipurpose Internet Mail Extensions (MIME) is an internet standard specified in a series of Request for Comments (RFC) written by the Internet Engineering Task Force. It was proposed by Nathaniel Borenstein in 1991, to allow people to send and receive emails that contained images, videos, documents and non-ASCII characters \u2013 \u0161\u00fc\u00e7\u0127 \u00e5\u015f \u0165\u0127\u0119\u00df\u0113 f\u00e2\u0148\u010d\u00ff \u010b\u0127\u00e0\u0159\u00e1\u0107\u021b\u0119\u0159\u015f. It also allows people to transport different data representations in a single message \u2013 such as plain text and HTML \u2013 and does not impose restrictions on the length of the message.</p> <p>Although, MIME was designed mainly for the Simple Mail Transfer Protocol (SMTP), it is important in other communication protocols. For example, in HTTP, a MIME header is inserted at the beginning of any web transmission. The purpose of MIME is to ensure interoperability across different email clients and systems (such as Gmail, Yahoo, Outlook, etc.). In fact, if you view the raw source of an email, you\u2019re guaranteed see many of MIME header fields described in this post.</p>","tags":["internet standards","internet"]},{"location":"2024/07/22/mime/#basic-text-email","title":"Basic Text Email","text":"<p>Let\u2019s start with an example of a MIME message for a basic email.</p> <pre><code>MIME-Version: 1.0\nFrom: Alice &lt;alice@example.com&gt;\nTo: Bob &lt;bob@example.com&gt;\nSubject: Free a quick call?\n\nContent-Type: multipart/alternative; boundary=\u201cfrontier\u201d\n\n--frontier\nContent-Type: text/plain; charset=\"UTF-8\"\nContent-Transfer-Encoding: quoted-printable\n\nHi Bob, \n\nAre you be available for a quick call on Wednesday?\n\nThanks,\nAlice\n\n--frontier\nContent-Type: text/html; charset=\"UTF-8\"\nContent-Transfer-Encoding: quoted-printable\n\n&lt;html&gt;\n   &lt;body&gt;\n      &lt;p&gt;\n         &lt;br&gt;Hi Bob\n         &lt;br&gt;Are you be available for a quick call on Wednesday?\n      &lt;/p&gt;\n      &lt;p&gt;Thanks,&lt;/p&gt;\n      &lt;p&gt;Alice&lt;br&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n\n--frontier--\n</code></pre> <p>The message contains a plain text and an HTML part arranged as part of a tree structure with, the C<code>ontent-Type: multipart/alternative</code> part being the tree\u2019s head and the <code>Content-Type: text/*</code> as the leaf nodes.</p> <p>Let\u2019s break down each header to understand what is going on:</p>","tags":["internet standards","internet"]},{"location":"2024/07/22/mime/#mime-version-10","title":"MIME-Version: 1.0","text":"<p>This has the dual purpose of telling the email client that the message leverages MIME to format the email as well as the version number. Although this versioning was introduced to permit changes to the MIME protocol, the creators didn\u2019t specify how to handle future MIME versions, and thus this header almost always reads 1.0.</p>","tags":["internet standards","internet"]},{"location":"2024/07/22/mime/#from-to-subject","title":"From, To &amp; Subject","text":"<p>Fairly straightforward, these headers define who the message sender and recipients are as well as the email subject.</p>","tags":["internet standards","internet"]},{"location":"2024/07/22/mime/#content-type","title":"Content-Type","text":"<p>The Content-Type header indicates the media type of the message content. This could be text, image, audio, video and so on. In our message above we have three Content-Type headers: multipart/alternative, text/plain and text/html. The Content-Type header field consists of a type and a subtype separated by a slash. In the email above the multipart/alternative Content-Type indicates to the client that each subsection is an \u201calternative\u201d version of the same or similar content. We can verify this as the text and HTML subsections (separated by a boundary) contain the exact same text. As such our email provides backwards compatibility while the HTML part allows us to introduce nicer formatting, such as hyperlinks or images.</p> <p>The <code>boundary=\u201cfrontier\u201d</code> specifies that each subsection of the multipart/alternative content type is separated by the string \u201c--frontier\u201d. Normally, you wouldn\u2019t use a word as a boundary and instead use a random string to ensures that the boundary does not accidentally appear in any parts it shouldn\u2019t.</p>","tags":["internet standards","internet"]},{"location":"2024/07/22/mime/#content-transfer-encoding","title":"Content-Transfer-Encoding","text":"<p>Lastly, the Content-Transfer-Encoding header indicates the binary-to-text encoding of the part. In order to transfer data via email (for example an image), we first need to extract it\u2019s binary representation then transform it to text. There are several ways to do this, but the two used in the MIME protocol are quoted-printable and base64. These tell the email client what binary-to-text encoding scheme was used, and that initial decoding is needed before the message can be read.</p>","tags":["internet standards","internet"]},{"location":"2024/07/22/mime/#email-with-attachment","title":"Email With Attachment","text":"<p>Now let\u2019s look at a slightly more complicated example of a MIME message that contains a PDF attachment.</p> <pre><code>MIME-Version: 1.0\nFrom: Alice &lt;alice@example.com&gt;\nTo: Bob &lt;bob@example.com&gt;\nSubject: See attached.\nContent-Type: multipart/mixed; boundary=\"main-section\"\n\n--main-section\nContent-Type: multipart/alternative; boundary=\"sub-section\"\n\n--sub-section\nContent-Type: text/plain; charset=\"UTF-8\"\n\nAttached is a PDF.\n\nBest wishes,\nAlice\n\n--sub-section\nContent-Type: text/html; charset=\"UTF-8\"\n\n&lt;html&gt;\n   &lt;div&gt;\n      &lt;div&gt;Attached is a PDF.\n      &lt;/div&gt;\n      &lt;div&gt;&lt;br&gt;&lt;/div&gt;\n      &lt;div&gt;Best wishes,&lt;/div&gt;\n      &lt;div&gt;Alice&lt;/div&gt;\n   &lt;/div&gt;\n&lt;/html&gt;\n\n--sub-section--\n--main-section\nContent-Type: application/pdf; name=\u201cdocument.pdf\"\nContent-Disposition: attachment; filename=\"document.pdf\"\nContent-Transfer-Encoding: base64\n\nJVBERi0xLjcNCiW1tbW1DQoxIDAgb2JqDQo\u2026\n--main-section\u2014\n</code></pre> <p>There are a couple of new headers here. First, the example introduces the multipart/mixed type and subtype of the Content-Type header. This is used for sending parts with different Content-Type header fields. As you may have spotted, we have some nesting going on here. This is the tree structure I alluded to earlier in action.</p> <p>The \u201csub-section\u201d boundary divides the parts of the multipart/alternative content type, i.e. the text and the HTML content. While the \u201cmain-section\u201d boundary divides the parts of the multipart/mixed content type, i.e. the email body and the PDF.</p>","tags":["internet standards","internet"]},{"location":"2024/07/22/mime/#content-disposition","title":"Content-Disposition","text":"<p>The Content-Disposition header underneath the application content type header specifies how to present the attachment. There are two valid dispositions: inline, which denotes that the media file should be displayed as soon as the message is displayed, and attachment, which specifies not to display the media file, and instead wait for some action by the user (usually click on the file).</p> <p>In addition, the Content-Disposition field also provides parameters for specifying the name of the file, the creation date  and the modification date.</p>","tags":["internet standards","internet"]},{"location":"2024/07/22/mime/#additional-headers","title":"Additional Headers","text":"<p>There are several more headers I have not yet mentioned that typically get added to MIME messages, including:</p> Header Description Date The date the email was sent. Message-ID A unique identifier that helps email clients organise emails into threads. Content-ID A unique identifier of any media files that were added to the message, so they can be easily referenced by the email client. Reply-To The email address to send a reply to (might be different from the original sender). In-Reply-To The ID of the message that the current email is responding to. Cc A list of recipients that receive a carbon copy of the message. <p>There are a few more that you might encounter if you looked at the raw source of an email \u2013 such as the DKIM-Signature \u2013 but in the interest of time I\u2019ll leave it at that (there are six RFCs which specify the MIME protocol, some of which are over 100 pages long).</p> <p>Finally, you may also encounter headers that start with X\u2013 (x dash). These are unofficial \u201cexperimental\" header fields that are typically added by the email client for internal use.</p>","tags":["internet standards","internet"]},{"location":"2024/07/30/what-we-know-about-leadership/","title":"SOLID Design Principles","text":"<p>I recently embarked on a painful software refactor. Just a few months ago, when we began building our application at ChaseLabs, our codebase was clean and efficient. Every function was documented, and data flowed elegantly through our system.</p> <p>But working in a nascent start-up has its own demands. The need to rapidly demonstrate a proof-of-concept and outperform competitors led to some quick and dirty solutions. A hack here, an anti-pattern there, and soon codebase started to degrade. It became rigid and fragile. Minor changes triggered a cascade of subsequent changes, causing our application to break often. Design preserving methods became harder to write than hacks, and with that our codebase was well and truly rotting.</p> <p>I decided I was going to do this refactor properly and re-read Mariano Anaya\u2019s Clean Code in Python for some inspiration. It was there in Chapter 4 that I discovered the SOLID Principles.</p> <p>SOLID is a mnemonic acronym for a set of five principles intended to make object-oriented codebases more maintainable, extendable and ultimately much easier to work with. It stands for:</p> <ul> <li>Single-Responsibility Principle</li> <li>Open/Closed Principle</li> <li>Liskov Substitution Principle</li> <li>Interface Segregation Principle</li> <li>Dependency Inversion Principle</li> </ul> <p>These principles were introduced by Robert C. Martin (aka. Uncle Bob) in Design Principles and Design Patterns as a means of preventing software degradation. Robert actually presents them in a slightly different order (OLDIS) and specifies that some principles are more important than others. In any case, in this post I will provide an overview of each principle (though in a slightly different order: OLSID), illustrating each with an example.</p>","tags":["solid","architecture"]},{"location":"2024/07/30/what-we-know-about-leadership/#openclosed-principle","title":"Open/Closed Principle","text":"<p>A module should be open for extension but closed for modification.</p> <p>Of the five principles, this is the most important. The basic idea is that we should be able to add new features without changing any existing code, simply by writing new code.</p> <p>To illustrate this, let\u2019s suppose we are designing a simple application that serves as a booking system for a restaurant and have the following code:</p> <pre><code>from datetime import datetime\n\nclass Customer:\n\n    def __init__(self, name: str, contact_details: dict, is_regular: bool):\n        self.name = name\n        self.contact_details = contact_details\n        self.is_regular = is_regular\n\nclass Reservation:\n\n    def __init__(self, customer: Customer, datetime: datetime) -&gt; None:\n        self.customer = customer\n        self.datetime = datetime\n\n    def notify_customer(self, preference):\n        if preference == \"email\":\n            # Contact the customer via email\n            ...\n        elif preference == \"phone\":\n            # Contact the customer via phone\n            ...\n</code></pre> <p>We first define a <code>Customer</code> class with a name, contact details (e.g., email, phone, etc.), and a Boolean indicating whether they are a regular customer.</p> <p>The <code>Reservation</code> class depends on a <code>Customer</code> who made the booking and includes the date and time of the booking. Additionally, it has a <code>notify_customer</code> method that notifies the customer about updates to the reservation based on their preferred contact method (e.g., email, phone, etc.).</p> <p>The problem here is that every time we want to add a new notification method \u2013 for example, \u201cWhatsApp\u201d \u2013 we need to make changes to the <code>notify_customer</code> function. This violates the Open/Closed Principle, as we should be able to add new features without changing our existing code.</p> <p>Abstraction is the key to the Open/Closed Principle and can be achieved through static polymorphism, also known as interfaces (use of templates or generics). Let\u2019s refactor our code to ensure we follow this principle.</p> <pre><code>from datetime import datetime\nfrom abc import ABC, abstractmethod\n\nclass Notifier(ABC):\n\n    @abstractmethod\n    def notify(self, info: str):\n        # Notify the customer about their reservation\n        ...\n\nclass EmailNotifier(Notifier):\n\n    def notify(self, email: str):\n        # Contact the customer via email\n        ...\n\nclass PhoneNotifier(Notifier):\n\n    def notify(self, number: str):\n        # Contact the customer via phone\n        ...\n\nclass Reservation:\n\n    def __init__(self, customer: Customer, datetime: datetime) -&gt; None:\n        self.customer = customer\n        self.datetime = datetime\n\n    def notify_customer(self, notifier: Notifier): \n        notifier.notify(self.customer.contact_preference)\n</code></pre> <p>By creating a <code>Notifier</code> interface using Python\u2019s abstract base class (ABC), we can now easily add new notification systems by creating a new subclass. Additionally, we no longer need to modify the notify_customer method to add this feature. For example, we can create a WhatsApp notification system as follows:</p> <pre><code>class WhatsAppNotifier(Notifier):\n\n    def notify(self, customer_id: int):\n        # Contact the customer via phone\n        ...\n</code></pre> <p>Some of you may have already spotted some problems with this implementation, which we will address as part of the next principle. While the Open/Closed Principle can be challenging to fully implement, even partial compliance can dramatically improve the structure of our application.</p>","tags":["solid","architecture"]},{"location":"2024/07/30/what-we-know-about-leadership/#liskov-substitution-principle","title":"Liskov Substitution Principle","text":"<p>Subclasses should be substitutable for the base classes.</p> <p>This principle derives from the concept of Design by Contract by Bertrand Meyer. Classes that derive from a base class must honour the structure of that base class. In other words, software entities (classes, functions, etc.) that use a base class should continue to function properly if a derivative of that base class is passed to them.</p> <p>The problem in our example above is that each subclass of the <code>Notifier</code> base class has different arguments. The <code>EmailNotifier</code> depends on an email argument (a string), whereas the <code>WhatsAppNotifier</code> depends on a customer ID (an integer). This inconsistency will invariably cause problems for our <code>notify_customer</code> method, as it cannot consistently use each derivative of the Notifier base class. Furthermore, the code will break completely when a notification system needs more than one argument (for example, the phone might require a country code as well as the base number).</p> <p>How could we fix this?</p> <p>Instead of passing the contact details, we should pass the <code>Customer</code> object itself. Then each method can fetch the information it needs directly from the customer.</p> <pre><code>class Notifier(ABC):\n\n    @abstractmethod\n    def notify(self, customer: Customer):\n        # Notify the customer about their reservation\n        ...\n\nclass EmailNotifier(Notifier):\n\n    def notify(self, customer: Customer):\n        # Contact the customer via email\n        ...\n</code></pre> <p>And so, our <code>notify_customer</code> method becomes:</p> <pre><code>class Reservation:\n\n    def __init__(self, customer: Customer, datetime: datetime) -&gt; None:\n        self.customer = customer\n        self.datetime = datetime\n\n    def notify_customer(self, notifier: Notifier): \n        notifier.notify(self.customer)\n</code></pre>","tags":["solid","architecture"]},{"location":"2024/07/30/what-we-know-about-leadership/#single-responsibility-principle","title":"Single-Responsibility Principle","text":"<p>A class should have one and only one reason to change, meaning that a class should have only one job.</p> <p>Returning to the \"S\" in our SOLID principles, the Single-Responsibility Principle states that we want to increase cohesion among things that change for the same reason and decrease the coupling among things that change for different reasons. In other words, we aim to isolate modules and design systems that are responsible for just one function.</p> <p>Our <code>notify_customer</code> method currently violates this principle. Notifying customers should be conceptually distinct from handling their reservations. Our current implementation couples reservations with notifications, causing problems when we want to test each system in isolation. We shouldn\u2019t need to implement a notification system when writing unit tests for our Reservation class. Let\u2019s fix this\u2026</p> <pre><code>class Reservation:\n\n    def __init__(self, customer: Customer, datetime: datetime) -&gt; None:\n        self.customer = customer\n        self.datetime = datetime\n\ndef notify_customer(reservation: Reservation, notifier: Notifier):\n    customer = reservation.customer\n    notifier.notify(customer)\n</code></pre> <p>By creating a function separate from the <code>Reservation</code> class, we ensure that changes to the notification system do not affect the reservations.</p> <p>In practice, this principle is a lot more subjective than the previous two, and you can certainly take it too far. Working with a system of hundreds of singleton interfaces sounds like hell. Ideally, you want to work with several small, conceptually distinct classes that are easy to manage and test, without having to spend ages navigating through your codebase to find what you\u2019re looking for.</p>","tags":["solid","architecture"]},{"location":"2024/07/30/what-we-know-about-leadership/#interface-segregation-principle","title":"Interface Segregation Principle","text":"<p>A client should never be forced to implement an interface that it doesn\u2019t use, or clients shouldn\u2019t be forced to depend on methods they do not use.</p> <p>Jumping ahead to the \"I\" in our SOLID acronym, the Interface Segregation Principle means that we shouldn\u2019t force methods or attributes onto subclasses that they don\u2019t use. It is better to create many client-specific interfaces than a general-purpose monolith. Creating a specific instance for each client and using multiple inheritance is preferable to creating a base class with all the methods that clients need.</p> <p>For instance, suppose we want to create a brand-new Employee class. We realise that an Employee has a name and contact details, so we decide to reuse some of the code we wrote for the Customer (which is generally a good thing).</p> <pre><code>class Employee(Customer):\n\n    def __init__(self, name: str, contact_details: dict):\n        super().__init__(name, contact_details, False)\n</code></pre> <p>The problem here is that the Employee class is forced to implement the <code>is_regular</code> Boolean, which is not appropriate. Instead, we should create additional abstractions that both <code>Employee</code> and <code>Customer</code> can extend.</p> <pre><code>class Person:\n\n    def __init__(self, name: str, contact_details: dict) -&gt; None:\n        self.name = name\n        self.contact_details = contact_details\n\nclass Employee(Person):\n    ...\n\nclass Customer(Person):\n\n    def __init__(self, name: str, contact_details: dict, is_regular: bool) -&gt; None:\n        super().__init__(name, contact_details)\n        self.is_regular = is_regular\n</code></pre> <p>In the above implementation, we have reduced code repetition, meaning that we only need to make changes in one place when necessary. Additionally, our Employee class is no longer forced to inherit the is_regular attribute, which it does not use.</p>","tags":["solid","architecture"]},{"location":"2024/07/30/what-we-know-about-leadership/#dependency-inversion-principle","title":"Dependency Inversion Principle","text":"<p>Depend upon Abstractions. Do not depend upon concretions.</p> <p>This final principle states that dependencies should always target an interface and never rely on a concrete implementation. This prevents us from depending on volatile software entities. </p> <p>Our restaurant reservation application already adheres to this principle. I think if you get the Liskov Substitution Principle right, the Dependency Inversion Principle naturally falls into place.</p> <p>Nonetheless, to illustrate this principle, let\u2019s suppose our restaurant has a special birthday party Reservation subclass and a method to cancel reservations.</p> <pre><code>class BirthdayParty(Reservation):\n    ...\n\ndef cancel_booking(booking: BirthdayParty):\n    ...\n</code></pre> <p>The above violates this principle because any high-level entity (the cancel_booking method) must not depend on the low-level entity (<code>BirthdayParty</code>). It should instead depend on the abstraction (the <code>Reservation</code> class).</p> <p>This conceptually makes sense since you should be able to cancel bookings in a generalised manner without knowing the specific type of reservation. By depending on the Reservation abstraction, the cancel_booking method becomes more flexible, capable of handling any type of reservation that extends the Reservation class, aka:</p> <pre><code>def cancel_booking(booking: Reservation):\n    ...\n</code></pre>","tags":["solid","architecture"]},{"location":"2024/06/30/what-we-know-about-leadership/","title":"What We Know About Leadership","text":"<p>What frustrates me about business books is that they tend to make generalisations based on anecdotal evidence or observations. Their claims often boil down to the logic of: \u201cHere is what I think is correct. This rich and successful person did it, and so to be rich and successful you should too\u201d.</p> <p>These books start with an agenda, then cherry-pick evidence in support of it. When really it should be the other way around: evidence first.</p> <p>In the spirit of an evidence first approach, Hogan &amp; Kaiser (2005) published a paper titled What We Know About Leadership. In their paper they reviewed the scientific literature on leadership to make an empirically grounded claims about the consequences of leadership and offer a straightforward summary of the characteristics of good and bad leaders.</p> <p>I really like this paper, and despite its age, I believe that the claims about leadership hold water today. So, I am writing this post to summarise the main points of their article, providing readers \u2013 and perhaps more so myself \u2013 a condensed version that can be read in just five minutes. </p> <p>Everything good about this blog post comes from Hogan &amp; Kaiser\u2019s paper, and everything bad is entirely my own.</p>","tags":["leadership","management"]},{"location":"2024/06/30/what-we-know-about-leadership/#goal-of-leadership","title":"Goal of Leadership","text":"<p>Leadership is defined as the ability to build and maintain effective teams. It follows that leadership should be evaluated on a team\u2019s performance over time. Grounded in this definition is the assumption that people are self-interested and tend to pursue short-term personal interests. Therefore, the goal of leadership is to convince people to put aside their selfish pursuits to come together around a common goal.</p> <p>With these definitions in place, it begs the question: what exactly is an effective team? Hogan &amp; Kaiser (2005) outline five components of an effective team in the context of organisations:</p> <ol> <li>Talented Personnel A talented team will outperform an untalented one. Talented personnel are identified through effective selection and hiring methods.</li> <li>Motivated Personnel A motivated team will outperform a demoralised one. The level of motivation in a team or organisation is directly linked to the performance of management. In fact, Harter, Schmidt, and Hayes (2002) showed that job satisfaction essentially means satisfaction with supervisors.</li> <li>Talented Management Team If it wasn\u2019t already obvious, good leadership is hugely consequential. CEOs account for about 14% of the variance in a firm\u2019s performance (Joyce, et al., 2003). To put this in perspective, the industry sector of a firm accounts for 19% of the variance.</li> <li>Effective Strategy for Outperforming the Competition This relies on systematic market research and a deep understanding of industry trends.</li> <li>Monitoring Systems Having in place systems that enable senior leaders to track and adjust the above four components.</li> </ol>","tags":["leadership","management"]},{"location":"2024/06/30/what-we-know-about-leadership/#characteristics-of-bad-leaders","title":"Characteristics of Bad Leaders","text":"<p>While the literature on what makes a good leader is fragmented and controversial, there is near-universal consensus on what makes a bad leader. What\u2019s more, bad leaders are prevalent everywhere; between 65% and 75% of employees in any given organization report that the worst aspect of their job is their immediate boss.</p> <p>Hogan &amp; Kaiser provide a taxonomy of personality traits typically associated with managerial incompetence:</p> <ol> <li>Borderline: Displays outbursts and is emotionally volatile. These individuals can be energetic and enthusiastic but are also moody, intense and are easily annoyed by people and projects.</li> <li>Avoidant: Reluctant to take risks due to fear of criticism. While making few mistakes can be a short-term strength, indecisiveness and risk aversion are not hallmarks of good leadership.</li> <li>Paranoid: Cynical and mistrustful. Such individuals often have insights into organisational politics but are also argumentative and combative.</li> <li>Schizoid: Aloof and uncommunicative. These people can be tough and resolute under pressure but are often insensitive to others\u2019 feelings or morale issues.</li> <li>Passive-aggressive: Displaying passive-aggressive behaviour, these individuals appear overtly cooperative but privately procrastinate and harbour resentment.</li> <li>Narcissistic: Exhibit grandiosity and entitlement. They may seem courageous, confident, or charismatic, but their excessive self-confidence often prevents them from admitting or learning from mistakes.</li> <li>Antisocial/psychopathic: Excessively takes risks and tests limits. While this can sometimes be a strength, such leaders can also be cunning, exploitative and manipulative.</li> <li>Histrionic: Characterised by expressive, animated and dramatic tendencies. These individuals seek attention, are impulsive and manage by crisis.</li> <li>Schizotypal: Acts and thinks in creative but sometimes odd or eccentric ways. They engage in excessive visionary, outside-the-box thinking in erratic and sometimes fanciful ways.</li> <li>Obsessive\u2013compulsive: Meticulous and precise, these individuals are hard-working and self-sacrificing but often overcontrolling, rigid or micromanaging.</li> <li>Dependent: Conforms and is overly eager to please superiors, leading to indecision.</li> </ol>","tags":["leadership","management"]},{"location":"2024/06/30/what-we-know-about-leadership/#characteristics-of-good-leaders","title":"Characteristics of Good Leaders","text":"<p>Hogan &amp; Kaiser summarise the characteristics of good leaders in terms of four \u201cvirtues\u201d: integrity, decisiveness, competence and vision. In addition to the four virtues, the authors also list an additional two traits: humility and persistence.</p>","tags":["leadership","management"]},{"location":"2024/06/30/what-we-know-about-leadership/#integrity","title":"Integrity","text":"<p>Credibility as a leader is crucially linked to integrity, which involves keeping your word, fulfilling promises, treating everyone fairly and not exploiting your position. The tacit question asked of a potential leader is \u201ccan we trust you not to abuse the privilege of authority?\u201d The answer for which lies in the leader's demonstrated character and reliability.</p>","tags":["leadership","management"]},{"location":"2024/06/30/what-we-know-about-leadership/#decisiveness","title":"Decisiveness","text":"<p>In times of crisis and uncertainty, the most effective leaders make prompt decisions. However, decisiveness is also crucial under normal conditions. Managers are involved in decision-making all day long, and the quality of their decisions accumulates over time.</p>","tags":["leadership","management"]},{"location":"2024/06/30/what-we-know-about-leadership/#competence","title":"Competence","text":"<p>Good leaders are a contributing resource for their teams. Expertise is essential for gaining legitimacy and respect from the team. While I do not think leaders need to be the superior in every way, they should at least be distinguished in a few key areas relevant to their organization\u2019s industry sector.</p> <p>Hogan &amp; Kaiser identify four domains of organisational competence that leaders should excel in:</p> <ul> <li>Intrapersonal This relates to a leader's ability to control emotions and behaviour, including courage, ambition, perseverance and an internalised standard of performance.</li> <li>Interpersonal This involves social skills, such as the talent for building and maintaining relationships, including listening, negotiating and approachability.</li> <li>Business This encompasses technical knowledge and abilities related to business matters, such as budgeting, coordination, planning and functional/technical skills.</li> <li>Leadership Finally, this domain is characterised by influence and team-building skills, including strategic hiring and staffing, as well as the ability to motivate and inspire others.</li> </ul>","tags":["leadership","management"]},{"location":"2024/06/30/what-we-know-about-leadership/#vision","title":"Vision","text":"<p>Effective leaders excel at articulating a compelling vision, which is crucial for conveying the purpose, meaning and significance of the group's efforts. This ability is fundamental for motivating team members and fostering a sense of direction and commitment. Additionally, a clear vision enhances team performance by delineating roles, setting goals and providing a clear path forward.</p>","tags":["leadership","management"]},{"location":"2024/06/30/what-we-know-about-leadership/#humility-persistence","title":"Humility &amp; Persistence","text":"<p>Finally, these two characteristics stand apart from the others and originate from Collins' (2001) book Good to Great. The book empirically demonstrates that the CEOs of 11 Fortune 500 companies, which performed above the market average for over 15 years, shared two key traits: humility and persistence. These leaders were modest and humble, rather than self-dramatizing or self-promoting, and they displayed extraordinary persistence.</p>","tags":["leadership","management"]},{"location":"archive/2024/","title":"2024","text":""},{"location":"archive/2020/","title":"2020","text":""},{"location":"category/software/","title":"Software","text":""},{"location":"category/business/","title":"Business","text":""}]}